services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - BASE_URL=http://localhost:3000
      - CORS_ORIGIN=*
      - DB_TYPE=sqlite
      - DB_PATH=/app/data/urls.db
      - STATIC_PATH=./public
    volumes:
      - ../api:/app:rw
      - ../data:/app/data:rw
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal

  frontend:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../frontend:/usr/share/nginx/html:ro
    depends_on:
      - api
    networks:
      - internal

networks:
  internal:
    driver: bridge

  # Optional: Add database services for testing
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_DB: urlshortener
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: password
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     restart: unless-stopped
#     profiles:
#       - postgres

#   sqlserver:
#     image: mcr.microsoft.com/mssql/server:2022-latest
#     environment:
#       SA_PASSWORD: "YourStrong@Passw0rd"
#       ACCEPT_EULA: "Y"
#     ports:
#       - "1433:1433"
#     volumes:
#       - sqlserver_data:/var/opt/mssql
#     restart: unless-stopped
#     profiles:
#       - sqlserver

# volumes:
#   postgres_data:
#   sqlserver_data:
